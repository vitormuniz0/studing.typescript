// üöÄ Nessa aula vamos explorar um dos recursos mais elegantes e poderosos do TypeScript: os Decorators. Eles s√£o uma forma de adicionar metaprograma√ß√£o ao seu c√≥digo, permitindo que voc√™ modifique ou aprimore a funcionalidade de classes, m√©todos, propriedades e par√¢metros. Vamos entender como isso funciona e quais s√£o suas aplica√ß√µes pr√°ticas! üíª‚ú®

function logDecorator(construtor: Function) {
    console.log("Decorador chamado!");
    console.log(construtor);
}

@logDecorator
class Pessoaa {
    constructor(public nome: string, public idade: number) {}
}

// Aqui, @logDecorator √© aplicado √† classe Pessoa. Quando a classe √© definida, o decorator √© executado automaticamente.

// Decorators de Classe, Propriedade e M√©todo
// Decorators podem ser aplicados em diferentes n√≠veis:

// Decorators de Classe: Modificam ou estendem a defini√ß√£o da classe.

function decoratorClasse(construtor: Function) {
    // L√≥gica do decorator
}

@decoratorClasse
class MinhaClasse {}

// Decorators de Propriedade: Usados para interceptar e modificar o comportamento de uma propriedade.

function decoratorPropriedade(target: any, propertyName: string) {
    // L√≥gica do decorator
}

class MinhaClassee {
    @decoratorPropriedade
    minhaPropriedade: string;
}

